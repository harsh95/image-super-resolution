# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X-1Ex52COQyPHJUSUAEvqeUmT29OMAqr
"""

!pip install ISR

#Importing the data

!wget http://data.vision.ee.ethz.ch/cvl/DIV2K/DIV2K_train_LR_bicubic_X2.zip
!wget http://data.vision.ee.ethz.ch/cvl/DIV2K/DIV2K_valid_LR_bicubic_X2.zip
!wget http://data.vision.ee.ethz.ch/cvl/DIV2K/DIV2K_train_HR.zip
!wget http://data.vision.ee.ethz.ch/cvl/DIV2K/DIV2K_valid_HR.zip

#Unzip and putting data into dictionary

!mkdir div2k
!unzip -q DIV2K_valid_LR_bicubic_X2.zip -d div2k
!unzip -q DIV2K_train_LR_bicubic_X2.zip -d div2k
!unzip -q DIV2K_train_HR.zip -d div2k
!unzip -q DIV2K_valid_HR.zip -d div2k

#loading the model

from ISR.models import RRDN, RDN
from ISR.models import Discriminator
from ISR.models import Cut_VGG19

model1 = RDN(weights='noise-cancel')
model = RRDN(weights='gans')
model2 = RDN(weights='psnr-small')
model3 = RDN(weights='psnr-large')

"""
rdn = RDN(arch_params={'C': 5, 'D':16, 'G':48, 'G0':52, 'x':3})
rdn.model.load_weights('PATH/TO/WEIGHTS')
"""

#setting the perameters 

lr_train_patch_size = 40
layers_to_extract = [5, 9]
scale = 2
hr_train_patch_size = lr_train_patch_size * scale

rrdn  = RRDN(arch_params={'C':4, 'D':3, 'G':64, 'G0':64, 'T':10, 'x':scale}, patch_size=lr_train_patch_size)
f_ext = Cut_VGG19(patch_size=hr_train_patch_size, layers_to_extract=layers_to_extract)
discr = Discriminator(patch_size=hr_train_patch_size, kernel_size=3)

#setting the loss weights, learning rate and trainer

from ISR.train import Trainer
loss_weights = {
  'generator': 0.0,
  'feature_extractor': 0.0833,
  'discriminator': 0.01
}
losses = {
  'generator': 'mae',
  'feature_extractor': 'mse',
  'discriminator': 'binary_crossentropy'
} 

log_dirs = {'logs': './logs', 'weights': './weights'}

learning_rate = {'initial_value': 0.0004, 'decay_factor': 0.5, 'decay_frequency': 30}

flatness = {'min': 0.0, 'max': 0.15, 'increase': 0.01, 'increase_frequency': 5}

trainer = Trainer(
    generator=rrdn,
    discriminator=discr,
    feature_extractor=f_ext,
    lr_train_dir='div2k/DIV2K_train_LR_bicubic/X2/',
    hr_train_dir='div2k/DIV2K_train_HR/',
    lr_valid_dir='div2k/DIV2K_train_LR_bicubic/X2/',
    hr_valid_dir='div2k/DIV2K_train_HR/',
    loss_weights=loss_weights,
    learning_rate=learning_rate,
    flatness=flatness,
    dataname='div2k',
    log_dirs=log_dirs,
    weights_generator=None,
    weights_discriminator=None,
    n_validation=40,
)

trainer.train(
    epochs=1,
    steps_per_epoch=20,
    batch_size=4,
    monitored_metrics={'val_generator_PSNR_Y': 'max'}
)

#loading the low resolution image

!wget http://images.math.cnrs.fr/IMG/png/section8-image.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images

import numpy as np
from PIL import Image

img = Image.open('data/input/test_images/section8-image.png')
img

#regular upscaled image

img.resize(size=(img.size[0]*4, img.size[1]*4), resample=Image.BICUBIC)

#prediction 1

sr_img1 = model1.predict(np.array(img))
Image.fromarray(sr_img1)

#prediction 2

sr_img3 = model3.predict(np.array(img))
Image.fromarray(sr_img3)

#Final prediction; upscaled image

sr_img = model.predict(np.array(img))
Image.fromarray(sr_img)

#example 2

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Urban100/image_SRF_2/img_001_SRF_2_LR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images

img1 = Image.open('data/input/test_images/img_001_SRF_2_LR.png')
img1

img1.resize(size=(img1.size[0]*4, img1.size[1]*4), resample=Image.BICUBIC)

sr1_img1 = model1.predict(np.array(img1))
Image.fromarray(sr1_img1)

sr1_img3 = model3.predict(np.array(img1))
Image.fromarray(sr1_img3)

sr1_img= model.predict(np.array(img1))
sr1_img = Image.fromarray(sr1_img)
sr1_img

sr1_img = sr1_img.save("data/input/test_images/geeks.jpg")

!pip install sewar

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Urban100/image_SRF_2/img_001_SRF_2_HR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
sr1 = Image.open('data/input/test_images/img_001_SRF_2_HR.png')
sr1 = sr1.resize(size=(sr1.size[0]*2, sr1.size[1]*2), resample=Image.BICUBIC)
sr1
sr1 = sr1.save("data/input/test_images/img_001_SRF_2_HR.png")
Image.open('data/input/test_images/img_001_SRF_2_HR.png')

import sewar
import cv2

sr1 = cv2.imread('data/input/test_images/img_001_SRF_2_HR.png')
sr1_img = cv2.imread('data/input/test_images/geeks.jpg')

sewar.full_ref.psnr(sr1, sr1_img, MAX=None)

sewar.full_ref.ssim(sr1, sr1_img, ws=8, K1=0.01, K2=0.03, MAX=None, fltr_specs=None, mode='valid')

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/BSD100/image_SRF_2/img_001_SRF_2_LR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
BSDimg = Image.open('data/input/test_images/img_001_SRF_2_LR.png')
BSDimg

BSDimg.resize(size=(BSDimg.size[0]*4, BSDimg.size[1]*4), resample=Image.BICUBIC)

BSDsr= model.predict(np.array(BSDimg))
BSDsr = Image.fromarray(BSDsr)
BSDsr

BSDsr = BSDsr.save("data/input/test_images/BSD.jpg")

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/BSD100/image_SRF_2/img_001_SRF_2_HR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
BSD = Image.open('data/input/test_images/img_001_SRF_2_HR.png')
BSD = BSD.resize(size=(BSD.size[0]*2, BSD.size[1]*2), resample=Image.BICUBIC)
BSD
BSD = BSD.save("data/input/test_images/img_001_SRF_2_HR.png")
Image.open('data/input/test_images/img_001_SRF_2_HR.png')

BSD = cv2.imread('data/input/test_images/img_001_SRF_2_HR.png')
BSDsr = cv2.imread('data/input/test_images/BSD.jpg')

sewar.full_ref.psnr(BSD, BSDsr, MAX=None)

sewar.full_ref.ssim(BSD, BSDsr, ws=8, K1=0.01, K2=0.03, MAX=None, fltr_specs=None, mode='valid')

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Set14/image_SRF_2/img_001_SRF_2_LR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
SET14img = Image.open('data/input/test_images/img_001_SRF_2_LR.png')
SET14img

SET14img.resize(size=(SET14img.size[0]*4, SET14img.size[1]*4), resample=Image.BICUBIC)

SET14sr = model.predict(np.array(SET14img))
SET14sr = Image.fromarray(SET14sr)
SET14sr

SET14sr = SET14sr.save("data/input/test_images/SET14.jpg")

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Set14/image_SRF_2/img_001_SRF_2_HR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
SET14 = Image.open('data/input/test_images/img_001_SRF_2_HR.png')
SET14 = SET14.resize(size=(SET14.size[0]*2, SET14.size[1]*2), resample=Image.BICUBIC)
SET14 = SET14.save("data/input/test_images/img_001_SRF_2_HR.png")
Image.open('data/input/test_images/img_001_SRF_2_HR.png')

SET14 = cv2.imread('data/input/test_images/img_001_SRF_2_HR.png')
SET14sr = cv2.imread('data/input/test_images/SET14.jpg')

sewar.full_ref.psnr(sr1, sr1_img, MAX=None)

sewar.full_ref.ssim(sr1, sr1_img, ws=8, K1=0.01, K2=0.03, MAX=None, fltr_specs=None, mode='valid')

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Set5/image_SRF_2/img_001_SRF_2_LR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
SET5img = Image.open('data/input/test_images/img_001_SRF_2_LR.png')
SET5img

SET5img.resize(size=(SET5img.size[0]*4, SET5img.size[1]*4), resample=Image.BICUBIC)

SET5sr= model.predict(np.array(SET5img))
SET5sr = Image.fromarray(SET5sr)
SET5sr

SET5sr = SET5sr.save("data/input/test_images/SET5.jpg")

!wget https://raw.githubusercontent.com/jbhuang0604/SelfExSR/master/data/Set5/image_SRF_2/img_001_SRF_2_HR.png
!mkdir -p data/input/test_images
!mv *.png data/input/test_images
SET5 = Image.open('data/input/test_images/img_001_SRF_2_HR.png')
SET5 = SET5.resize(size=(SET5.size[0]*2, SET5.size[1]*2), resample=Image.BICUBIC)
SET5 = SET5.save("data/input/test_images/img_001_SRF_2_HR.png")
Image.open('data/input/test_images/img_001_SRF_2_HR.png')

SET5 = cv2.imread('data/input/test_images/img_001_SRF_2_HR.png')
SET5sr = cv2.imread('data/input/test_images/SET5.jpg')

sewar.full_ref.psnr(SET5, SET5sr, MAX=None)

sewar.full_ref.ssim(sr1, sr1_img, ws=8, K1=0.01, K2=0.03, MAX=None, fltr_specs=None, mode='valid')